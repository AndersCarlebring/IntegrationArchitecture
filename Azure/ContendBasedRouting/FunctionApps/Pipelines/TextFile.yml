name : $(Date:yyyyMMdd).$(Rev:r.)
trigger:
  branches:
    include: # change here to include correct branch (master or Release).
      - Development
  paths:
    include:  # This determ where to look for changes, and if change inside this folder is found artifact is created.
      - /*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Development'  # Change to reflect Test or Prod envirorment.
  SolutionPath: '**/function_ContentBasedRouting.csproj'  # Determ path to function .csproj file, so correct function is built and deployed.
  FunctionName: 'FunctionApp231214'  # Change here to determ name output file.
  
stages:
- stage: Build
  displayName: Build solution
  jobs:  
  - job: Build
    displayName: Build and publish solution
    steps:

    - task: UseDotNet@2      
      inputs:
        packageType: 'sdk'
        version: '6.x'
      displayName: 'Use .NET Core SDK 6.x'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(SolutionPath)'
      displayName: 'Restore NuGet packages'
 
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(SolutionPath)'
      displayName: 'Build solution'
        
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(SolutionPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
      displayName: 'Publish solution'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        ArtifactName: '$(buildConfiguration)_$(FunctionName)_$(ReleaseV)'
        publishLocation: 'Container'